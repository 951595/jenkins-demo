---------------------------------------Automating Infrastructure using Terraform.
step-1: to check the all versions install or not in your device like terraform, aws cli
step-2: create the user in aws account and take the access-key and secrets-key
step-3: ceate one folder using mkdir "ec2-terra"
           change the directory name using "cd ec2-terra"
step-4: create main.tf file
step-5: execute the terraform commands . these are :
        1. terraform init
        2.terraform plan 
       3. terraform apply
step-6: check in aws console the ec2 instance create or not .. instance is created
step7: connect the ec2-instance 
step-8; after connected instance i installed all i need softwares java , jenkins and python.

----------------------------------------------------------------------------------------------------------------------------
----------------AWS-Jenkins Pipeline script--------------
pipeline {
    environment {
        registry = "divya951595/krishna"
        registryCredential= 'divya'
        dockerImage = ''
    }
    agent any

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'main', url: 'https://github.com/951595/jenkins-demo.git'

                // Run Maven on a Unix agent.
               // sh 'mvn clean package'

                // To run Maven on a Windows agent, use
                // sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage("maven"){
            steps {
                sh 'mvn clean package'
            }
        }
        stage("artifacts"){
            steps {
                archiveArtifacts artifacts: 'target/*.jar'
            }
        }
        stage("Build image"){
            steps {
                script {
                dockerImage = docker.build registry 
                }
            }
        }
        stage("push image"){
            steps{
                script {
                docker.withRegistry('', registryCredential){
                    dockerImage.push()
                }
                }
            }
        }
        
    }
}
-------------------------------------------maven install----------------------------------------
sudo wget https://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo

sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo

sudo yum install -y apache-maven

sudo mvn --version
-----------------------------------------------------------------install mysqlin aws ec2------------------------
#  this command updates all packages to the latest version
sudo yum update -y 

# this command installs MySQL server on your machine, it also creates a systemd service
sudo yum install -y mariadb-server

# this command enables the service created in previous step
sudo systemctl enable mariadb

# this command starts the MySQL server service on your Linux instance
sudo systemctl start mariadb

# this command helps you to set root user password and improve your DB security
sudo mysql_secure_installation
# Here, just hit enter as we have not set any password yet
Enter current password for root (enter for none): 

# Here, reply with Y
Set root password [Y/n]

# Enter new password
New Password:

# Re-enter new password
Re-enter new Password:

## Say Y
Remove anonymous users? [Y/n]

## Say Y
Disallow root login remotely? [Y/n]

## Say N, as we would need them for verification 
Remove test database and access to it? [Y/n] y

## Say Y
Reload privilege tables now? [Y/n] y

To connect to the MySQL instance, run the following command.

mysql -h localhost -u root -p

Once connected, run below command.

SHOW DATABASES;
